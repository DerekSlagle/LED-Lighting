#include "DataPlayer_initFuncs.h"

unsigned int numBytes_dogAni(){ return 121; }
unsigned int numBits_dogAni(){ return 960; }
unsigned int numColors_dogAni(){ return 8; }

unsigned int init_dogAniData( Light* LightGrid, DataPlayer& DP, uint8_t* ByteArr, Light* ColorArr )
{
    // the 8 colors
  DP.pLight = ColorArr;
  DP.pLight[0] = Light( 255, 255, 255 );
  DP.pLight[1] = Light( 255, 255, 255 );
  DP.pLight[2] = Light( 204, 150, 63 );
  DP.pLight[3] = Light( 205, 134, 29 );
  DP.pLight[4] = Light( 205, 184, 154 );
  DP.pLight[5] = Light( 68, 65, 60 );
  DP.pLight[6] = Light( 191, 140, 59 );
  DP.pLight[7] = Light( 237, 171, 73 );

  DP.stepPause = 30;
  DP.init( LightGrid[0], 8, 8, ByteArr[0], 121, 8 );
  DP.BA.sizeBits = 960;// 5frames*64lights*3bits/assign
  DP.drawOff = true;

  // the 121 byte assignments
  uint8_t* ID = ByteArr;
  ID[0] = 0; ID[1] = 0; ID[2] = 0; ID[3] = 128; ID[4] = 0;
  ID[5] = 0; ID[6] = 176; ID[7] = 2; ID[8] = 0; ID[9] = 181;
  ID[10] = 35; ID[11] = 32; ID[12] = 64; ID[13] = 100; ID[14] = 219;
  ID[15] = 192; ID[16] = 254; ID[17] = 255; ID[18] = 0; ID[19] = 14;
  ID[20] = 240; ID[21] = 64; ID[22] = 0; ID[23] = 48; ID[24] = 0;
  ID[25] = 0; ID[26] = 0; ID[27] = 128; ID[28] = 0; ID[29] = 0;
  ID[30] = 176; ID[31] = 2; ID[32] = 0; ID[33] = 181; ID[34] = 35;
  ID[35] = 32; ID[36] = 64; ID[37] = 100; ID[38] = 219; ID[39] = 192;
  ID[40] = 254; ID[41] = 255; ID[42] = 0; ID[43] = 14; ID[44] = 240;
  ID[45] = 64; ID[46] = 0; ID[47] = 48; ID[48] = 36; ID[49] = 73;
  ID[50] = 146; ID[51] = 0; ID[52] = 0; ID[53] = 0; ID[54] = 128;
  ID[55] = 0; ID[56] = 0; ID[57] = 176; ID[58] = 2; ID[59] = 0;
  ID[60] = 181; ID[61] = 35; ID[62] = 32; ID[63] = 64; ID[64] = 100;
  ID[65] = 219; ID[66] = 192; ID[67] = 254; ID[68] = 255; ID[69] = 8;
  ID[70] = 1; ID[71] = 48; ID[72] = 0; ID[73] = 0; ID[74] = 0;
  ID[75] = 0; ID[76] = 0; ID[77] = 0; ID[78] = 36; ID[79] = 73;
  ID[80] = 146; ID[81] = 0; ID[82] = 4; ID[83] = 0; ID[84] = 176;
  ID[85] = 2; ID[86] = 0; ID[87] = 181; ID[88] = 35; ID[89] = 32;
  ID[90] = 64; ID[91] = 100; ID[92] = 219; ID[93] = 241; ID[94] = 254;
  ID[95] = 63; ID[96] = 0; ID[97] = 0; ID[98] = 0; ID[99] = 0;
  ID[100] = 0; ID[101] = 0; ID[102] = 36; ID[103] = 73; ID[104] = 146;
  ID[105] = 0; ID[106] = 4; ID[107] = 0; ID[108] = 176; ID[109] = 2;
  ID[110] = 0; ID[111] = 181; ID[112] = 35; ID[113] = 0; ID[114] = 64;
  ID[115] = 100; ID[116] = 59; ID[117] = 241; ID[118] = 254; ID[119] = 63;
  ID[120] = 0;

  return 960;
}

unsigned int numBytes_alphaAni(){ return 48; }
unsigned int numBits_alphaAni(){ return 384; }
unsigned int numColors_alphaAni(){ return 2; }

unsigned int init_alphaAniData( Light* LightGrid, DataPlayer& DP, uint8_t* ByteArr, Light* ColorArr )
{
     // the 2 colors
  DP.pLight = ColorArr;
  DP.pLight[0] = Light( 0, 0, 240 );
  DP.pLight[1] = Light( 0, 240, 0 );

  DP.stepPause = 40;
  DP.init( LightGrid[0], 8, 8, ByteArr[0], 48, 2 );
  DP.BA.sizeBits = 384;// 6frames*64lights*1bit/assign
  DP.drawOff = true;

  // the 48 byte assignments
  uint8_t* ID = ByteArr;
  ID[0] = 30; ID[1] = 33; ID[2] = 33; ID[3] = 63; ID[4] = 33;
  ID[5] = 33; ID[6] = 33; ID[7] = 0;  ID[8] = 31; ID[9] = 33;
  ID[10] = 31; ID[11] = 33; ID[12] = 33; ID[13] = 33; ID[14] = 31;
  ID[15] = 0; ID[16] = 62; ID[17] = 1; ID[18] = 1; ID[19] = 1;
  ID[20] = 1; ID[21] = 1; ID[22] = 62; ID[23] = 0; ID[24] = 31;
  ID[25] = 33; ID[26] = 33; ID[27] = 33; ID[28] = 33; ID[29] = 33;
  ID[30] = 31; ID[31] = 0; ID[32] = 63; ID[33] = 1; ID[34] = 1;
  ID[35] = 15; ID[36] = 1; ID[37] = 1; ID[38] = 63; ID[39] = 0;
  ID[40] = 63; ID[41] = 1; ID[42] = 1; ID[43] = 15; ID[44] = 1;
  ID[45] = 1; ID[46] = 1; ID[47] = 0;

  return 384;
}

unsigned int numBytes_seagullAni(){ return 288; }
unsigned int numBits_seagullAni(){ return 2304; }
unsigned int numColors_seagullAni(){ return 10; }

unsigned int init_seagullAniData( Light* LightGrid, DataPlayer& DP, uint8_t* ByteArr, Light* ColorArr )
{
    // the 10 colors
  DP.pLight = ColorArr;
  DP.pLight[0] = Light( 0,0,0 );
  DP.pLight[1] = Light( 241,241,241 );
  DP.pLight[2] = Light( 255,216,0 );
  DP.pLight[3] = Light( 236,236,236 );
  DP.pLight[4] = Light( 206,206,206 );
  DP.pLight[5] = Light( 208,208,208 );
  DP.pLight[6] = Light( 240,240,240 );
  DP.pLight[7] = Light( 232,232,232 );
  DP.pLight[8] = Light( 229,229,229 );
  DP.pLight[9] = Light( 200,200,200 );

  DP.stepPause = 20;
  DP.init( LightGrid[0], 8, 8, ByteArr[0], 288, 10 );
  DP.BA.sizeBits = 2304;// 6frames*64lights*1bit/assign
  DP.drawOff = true;

  // the 288 byte assignments
  uint8_t* X = ByteArr;
  X[0] = 0; X[1] = 0; X[2] = 0; X[3] = 0; X[4] = 128;
  X[5] = 136; X[6] = 0; X[7] = 0; X[8] = 68; X[9] = 44;
  X[10] = 0; X[11] = 0; X[12] = 128; X[13] = 162; X[14] = 6;
  X[15] = 0; X[16] = 0; X[17] = 230; X[18] = 33; X[19] = 30;
  X[20] = 0; X[21] = 22; X[22] = 41; X[23] = 145; X[24] = 0;
  X[25] = 32; X[26] = 146; X[27] = 9; X[28] = 0; X[29] = 0;
  X[30] = 4; X[31] = 4; X[32] = 0; X[33] = 0; X[34] = 0;
  X[35] = 0; X[36] = 0; X[37] = 0; X[38] = 0; X[39] = 0;
  X[40] = 128; X[41] = 136; X[42] = 0; X[43] = 0; X[44] = 68;
  X[45] = 44; X[46] = 6; X[47] = 0; X[48] = 128; X[49] = 162;
  X[50] = 33; X[51] = 30; X[52] = 0; X[53] = 22; X[54] = 41;
  X[55] = 145; X[56] = 0; X[57] = 32; X[58] = 146; X[59] = 9;
  X[60] = 0; X[61] = 0; X[62] = 4; X[63] = 4; X[64] = 0;
  X[65] = 0; X[66] = 0; X[67] = 0; X[68] = 0; X[69] = 0;
  X[70] = 0; X[71] = 0; X[72] = 0; X[73] = 0; X[74] = 0;
  X[75] = 0; X[76] = 128; X[77] = 136; X[78] = 0; X[79] = 0;
  X[80] = 68; X[81] = 44; X[82] = 38; X[83] = 30; X[84] = 128;
  X[85] = 162; X[86] = 33; X[87] = 145; X[88] = 0; X[89] = 22;
  X[90] = 153; X[91] = 9; X[92] = 0; X[93] = 0; X[94] = 4;
  X[95] = 4; X[96] = 0; X[97] = 0; X[98] = 0; X[99] = 0;
  X[100] = 0; X[101] = 0; X[102] = 0; X[103] = 0; X[104] = 0;
  X[105] = 0; X[106] = 0; X[107] = 0; X[108] = 0; X[109] = 0;
  X[110] = 0; X[111] = 0; X[112] = 128; X[113] = 136; X[114] = 38;
  X[115] = 30; X[116] = 64; X[117] = 44; X[118] = 33; X[119] = 145;
  X[120] = 132; X[121] = 162; X[122] = 153; X[123] = 9; X[124] = 0;
  X[125] = 0; X[126] = 4; X[127] = 4; X[128] = 0; X[129] = 0;
  X[130] = 0; X[131] = 0; X[132] = 0; X[133] = 0; X[134] = 0;
  X[135] = 0; X[136] = 0; X[137] = 0; X[138] = 0; X[139] = 0;
  X[140] = 0; X[141] = 0; X[142] = 0; X[143] = 0; X[144] = 128;
  X[145] = 136; X[146] = 38; X[147] = 30; X[148] = 128; X[149] = 44;
  X[150] = 33; X[151] = 145; X[152] = 128; X[153] = 164; X[154] = 153;
  X[155] = 9; X[156] = 0; X[157] = 4; X[158] = 4; X[159] = 4;
  X[160] = 0; X[161] = 0; X[162] = 0; X[163] = 0; X[164] = 0;
  X[165] = 0; X[166] = 0; X[167] = 0; X[168] = 0; X[169] = 0;
  X[170] = 0; X[171] = 0; X[172] = 0; X[173] = 0; X[174] = 0;
  X[175] = 0; X[176] = 128; X[177] = 136; X[178] = 38; X[179] = 30;
  X[180] = 64; X[181] = 44; X[182] = 33; X[183] = 145; X[184] = 132;
  X[185] = 162; X[186] = 153; X[187] = 9; X[188] = 0; X[189] = 0;
  X[190] = 4; X[191] = 4; X[192] = 0; X[193] = 0; X[194] = 0;
  X[195] = 0; X[196] = 0; X[197] = 0; X[198] = 0; X[199] = 0;
  X[200] = 0; X[201] = 0; X[202] = 0; X[203] = 0; X[204] = 0;
  X[205] = 0; X[206] = 0; X[207] = 0; X[208] = 128; X[209] = 136;
  X[210] = 38; X[211] = 30; X[212] = 128; X[213] = 44; X[214] = 33;
  X[215] = 145; X[216] = 128; X[217] = 164; X[218] = 153; X[219] = 9;
  X[220] = 0; X[221] = 4; X[222] = 4; X[223] = 4; X[224] = 0;
  X[225] = 0; X[226] = 0; X[227] = 0; X[228] = 0; X[229] = 0;
  X[230] = 0; X[231] = 0; X[232] = 0; X[233] = 0; X[234] = 0;
  X[235] = 0; X[236] = 0; X[237] = 0; X[238] = 0; X[239] = 0;
  X[240] = 128; X[241] = 136; X[242] = 38; X[243] = 30; X[244] = 64;
  X[245] = 44; X[246] = 33; X[247] = 145; X[248] = 132; X[249] = 162;
  X[250] = 153; X[251] = 9; X[252] = 0; X[253] = 0; X[254] = 4;
  X[255] = 4; X[256] = 0; X[257] = 0; X[258] = 0; X[259] = 0;
  X[260] = 0; X[261] = 0; X[262] = 0; X[263] = 0; X[264] = 128;
  X[265] = 136; X[266] = 0; X[267] = 0; X[268] = 68; X[269] = 44;
  X[270] = 6; X[271] = 0; X[272] = 128; X[273] = 162; X[274] = 33;
  X[275] = 30; X[276] = 0; X[277] = 22; X[278] = 41; X[279] = 145;
  X[280] = 0; X[281] = 32; X[282] = 146; X[283] = 9; X[284] = 0;
  X[285] = 0; X[286] = 4; X[287] = 4;

  return 2304;
}

unsigned int numBytes_waterAni(){ return 256; }
unsigned int numBits_waterAni(){ return 2048; }
unsigned int numColors_waterAni(){ return 11; }

unsigned int init_waterAniData( Light* LightGrid, DataPlayer& DP, uint8_t* ByteArr, Light* ColorArr )
{
    // the 11 colors
  DP.pLight = ColorArr;
  ColorArr[0] = Light( 0,0,0 );
  ColorArr[1] = Light( 167,221,255 );
  ColorArr[2] = Light( 202,254,255 );
  ColorArr[3] = Light( 185,244,255 );
  ColorArr[4] = Light( 125,179,237 );
  ColorArr[5] = Light( 160,212,255 );
  ColorArr[6] = Light( 142,189,235 );
  ColorArr[7] = Light( 165,218,255 );
  ColorArr[8] = Light( 148,197,249 );
  ColorArr[9] = Light( 180,226,255 );
  ColorArr[10] = Light( 111,159,211 );

  DP.stepPause = 20;
  DP.init( LightGrid[0], 8, 8, ByteArr[0], 256, 11 );
  DP.BA.sizeBits = 2048;// 8frames*64lights*4bit/assign
  DP.drawOff = true;

  // the 256 byte assignments
   uint8_t* X = ByteArr;
  X[0] = 0; X[1] = 0; X[2] = 0; X[3] = 0; X[4] = 128;
  X[5] = 8; X[6] = 0; X[7] = 0; X[8] = 72; X[9] = 44;
  X[10] = 128; X[11] = 8; X[12] = 200; X[13] = 42; X[14] = 72;
  X[15] = 44; X[16] = 38; X[17] = 226; X[18] = 200; X[19] = 42;
  X[20] = 145; X[21] = 94; X[22] = 40; X[23] = 34; X[24] = 225;
  X[25] = 86; X[26] = 200; X[27] = 42; X[28] = 94; X[29] = 149;
  X[30] = 44; X[31] = 66; X[32] = 0; X[33] = 0; X[34] = 0;
  X[35] = 0; X[36] = 0; X[37] = 136; X[38] = 0; X[39] = 0;
  X[40] = 128; X[41] = 196; X[42] = 2; X[43] = 136; X[44] = 130;
  X[45] = 172; X[46] = 130; X[47] = 196; X[48] = 18; X[49] = 34;
  X[50] = 138; X[51] = 172; X[52] = 145; X[53] = 94; X[54] = 72;
  X[55] = 34; X[56] = 225; X[57] = 86; X[58] = 200; X[59] = 42;
  X[60] = 94; X[61] = 149; X[62] = 44; X[63] = 66; X[64] = 0;
  X[65] = 0; X[66] = 0; X[67] = 0; X[68] = 0; X[69] = 128;
  X[70] = 8; X[71] = 0; X[72] = 8; X[73] = 72; X[74] = 44;
  X[75] = 128; X[76] = 44; X[77] = 200; X[78] = 44; X[79] = 72;
  X[80] = 42; X[81] = 33; X[82] = 130; X[83] = 200; X[84] = 146;
  X[85] = 94; X[86] = 72; X[87] = 44; X[88] = 225; X[89] = 86;
  X[90] = 200; X[91] = 42; X[92] = 94; X[93] = 149; X[94] = 44;
  X[95] = 66; X[96] = 0; X[97] = 0; X[98] = 0; X[99] = 0;
  X[100] = 0; X[101] = 0; X[102] = 136; X[103] = 0; X[104] = 136;
  X[105] = 128; X[106] = 196; X[107] = 2; X[108] = 196; X[109] = 130;
  X[110] = 172; X[111] = 130; X[112] = 172; X[113] = 226; X[114] = 34;
  X[115] = 136; X[116] = 34; X[117] = 94; X[118] = 72; X[119] = 44;
  X[120] = 225; X[121] = 86; X[122] = 200; X[123] = 42; X[124] = 94;
  X[125] = 149; X[126] = 44; X[127] = 66; X[128] = 0; X[129] = 0;
  X[130] = 0; X[131] = 0; X[132] = 0; X[133] = 0; X[134] = 128;
  X[135] = 8; X[136] = 128; X[137] = 8; X[138] = 72; X[139] = 44;
  X[140] = 72; X[141] = 44; X[142] = 200; X[143] = 42; X[144] = 200;
  X[145] = 42; X[146] = 42; X[147] = 194; X[148] = 33; X[149] = 82;
  X[150] = 72; X[151] = 44; X[152] = 225; X[153] = 86; X[154] = 200;
  X[155] = 42; X[156] = 94; X[157] = 149; X[158] = 44; X[159] = 66;
  X[160] = 0; X[161] = 0; X[162] = 0; X[163] = 0; X[164] = 0;
  X[165] = 0; X[166] = 0; X[167] = 136; X[168] = 2; X[169] = 136;
  X[170] = 128; X[171] = 196; X[172] = 130; X[173] = 196; X[174] = 130;
  X[175] = 172; X[176] = 134; X[177] = 172; X[178] = 130; X[179] = 34;
  X[180] = 145; X[181] = 34; X[182] = 72; X[183] = 44; X[184] = 225;
  X[185] = 86; X[186] = 200; X[187] = 42; X[188] = 94; X[189] = 149;
  X[190] = 44; X[191] = 66; X[192] = 0; X[193] = 0; X[194] = 0;
  X[195] = 0; X[196] = 8; X[197] = 0; X[198] = 0; X[199] = 128;
  X[200] = 44; X[201] = 128; X[202] = 8; X[203] = 72; X[204] = 42;
  X[205] = 72; X[206] = 44; X[207] = 200; X[208] = 18; X[209] = 200;
  X[210] = 42; X[211] = 40; X[212] = 145; X[213] = 46; X[214] = 66;
  X[215] = 44; X[216] = 225; X[217] = 86; X[218] = 200; X[219] = 42;
  X[220] = 94; X[221] = 149; X[222] = 44; X[223] = 66; X[224] = 0;
  X[225] = 0; X[226] = 0; X[227] = 0; X[228] = 136; X[229] = 0;
  X[230] = 0; X[231] = 0; X[232] = 196; X[233] = 2; X[234] = 136;
  X[235] = 128; X[236] = 172; X[237] = 130; X[238] = 196; X[239] = 130;
  X[240] = 34; X[241] = 129; X[242] = 172; X[243] = 194; X[244] = 145;
  X[245] = 94; X[246] = 34; X[247] = 44; X[248] = 225; X[249] = 86;
  X[250] = 200; X[251] = 42; X[252] = 94; X[253] = 149; X[254] = 44;
  X[255] = 66;

  return 2048;
}

unsigned int numBytes_spiderAni(){ return 97; }
unsigned int numBits_spiderAni(){ return 768; }
unsigned int numColors_spiderAni(){ return 5; }

unsigned int init_spiderAniData( Light* LightGrid, DataPlayer& DP, uint8_t* ByteArr, Light* ColorArr )
{
    // the 5 colors
  DP.pLight = ColorArr;
 // ColorArr[0] = Light( 255,255,109 );
  ColorArr[0] = Light( 0,60,200 );
  ColorArr[1] = Light( 20,12,28 );
  ColorArr[2] = Light( 68,36,52 );
  ColorArr[3] = Light( 91,88,76 );
  ColorArr[4] = Light( 208,70,72 );

  DP.stepPause = 10;
  DP.init( LightGrid[0], 8, 8, ByteArr[0], 97, 5 );
  DP.BA.sizeBits = 768;// 4frames*64lights*3bit/assign
  DP.drawOff = true;

  // the 97 byte assignments
   uint8_t* X = ByteArr;
  X[0] = 0; X[1] = 0; X[2] = 0; X[3] = 0; X[4] = 0; 
  X[5] = 0; X[6] = 0; X[7] = 0; X[8] = 0; X[9] = 32; 
  X[10] = 72; X[11] = 130; X[12] = 16; X[13] = 45; X[14] = 83; 
  X[15] = 32; X[16] = 163; X[17] = 144; X[18] = 16; X[19] = 72; 
  X[20] = 66; X[21] = 32; X[22] = 0; X[23] = 128; X[24] = 0; 
  X[25] = 0; X[26] = 0; X[27] = 0; X[28] = 0; X[29] = 0; 
  X[30] = 32; X[31] = 72; X[32] = 2; X[33] = 16; X[34] = 45; 
  X[35] = 147; X[36] = 32; X[37] = 163; X[38] = 80; X[39] = 16; 
  X[40] = 72; X[41] = 130; X[42] = 32; X[43] = 0; X[44] = 64; 
  X[45] = 0; X[46] = 0; X[47] = 128; X[48] = 0; X[49] = 0; 
  X[50] = 0; X[51] = 0; X[52] = 0; X[53] = 0; X[54] = 0; 
  X[55] = 0; X[56] = 0; X[57] = 32; X[58] = 72; X[59] = 130; 
  X[60] = 16; X[61] = 45; X[62] = 83; X[63] = 32; X[64] = 163; 
  X[65] = 144; X[66] = 16; X[67] = 72; X[68] = 66; X[69] = 32; 
  X[70] = 0; X[71] = 128; X[72] = 0; X[73] = 0; X[74] = 0; 
  X[75] = 0; X[76] = 0; X[77] = 0; X[78] = 0; X[79] = 72; 
  X[80] = 130; X[81] = 32; X[82] = 45; X[83] = 83; X[84] = 16; 
  X[85] = 163; X[86] = 144; X[87] = 32; X[88] = 72; X[89] = 66; 
  X[90] = 16; X[91] = 0; X[92] = 128; X[93] = 32; X[94] = 0; 
  X[95] = 0; X[96] = 0;

  return 768;
}

unsigned int numBytes_digitsAni()
{ return 19; }

unsigned int numBits_digitsAni()
{ return 150; }

unsigned int numColors_digitsAni()
{ return 2; }

unsigned int init_digitsAniData( Light* LightGrid, DataPlayer& DP, uint8_t* ByteArr, Light* ColorArr )
{
    // the 2 colors
  DP.pLight = ColorArr;
 // ColorArr[0] = Light( 240,0,0 );
 // ColorArr[1] = Light( 0,0,240 );

  DP.stepPause = 20;
  DP.init( LightGrid[0], 5, 3, ByteArr[0], 19, 2 );
  DP.BA.sizeBits = 150;// 4frames*64lights*3bit/assign
  DP.drawOff = true;

  // the 19 byte assignments
   uint8_t* X = ByteArr;  
  X[0] = 111; X[1] = 251; X[2] = 73; X[3] = 250; X[4] = 249;
  X[5] = 252; X[6] = 60; X[7] = 223; X[8] = 158; X[9] = 124;
  X[10] = 206; X[11] = 39; X[12] = 239; X[13] = 79; X[14] = 146;
  X[15] = 239; X[16] = 251; X[17] = 247; X[18] = 36;

  return 150;
}